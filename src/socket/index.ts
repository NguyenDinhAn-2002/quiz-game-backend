import { Server } from "socket.io";
import { rooms } from "./rooms";

// Bi·∫øn l∆∞u timeout x√≥a ph√≤ng sau khi host disconnect
const roomDeletionTimeouts: { [pin: string]: NodeJS.Timeout } = {};
const playerDisconnectTimeouts: { [socketId: string]: NodeJS.Timeout } = {};

const DISCONNECT_TIMEOUT = 15000; // 15 gi√¢y ch·ªù reconnect

export const socketHandler = (io: Server) => {
  io.on("connection", (socket) => {
    console.log("üîå New connection:", socket.id);

    // ========== HOST T·∫†O PH√íNG ==========
    socket.on("host-create-room", ({ quizId }, callback) => {
      const pin = Math.floor(100000 + Math.random() * 900000).toString();

      rooms[pin] = {
        quizId,
        hostId: socket.id,
        isStarted: false,
        currentQuestion: 0,
        players: [],
      };

      socket.join(pin);
      console.log(`üè† Room created: PIN ${pin} by Host (${socket.id})`);

      callback({ pin, hostId: socket.id });
      io.to(pin).emit("room-updated", rooms[pin]);
    });

    // ========== NG∆Ø·ªúI CH∆†I JOIN PH√íNG ==========

socket.on("player-join-room", ({ pin, name, avatar }, callback) => {
  const room = rooms[pin];
  if (!room) return callback({ error: "Room not found" });

  if (room.isStarted) return callback({ error: "Game already started. Cannot join now." });

  // const isNameTaken = room.players.some(p => p.name === name);
  // if (isNameTaken) return callback({ error: "T√™n ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, h√£y ch·ªçn t√™n kh√°c." });

  room.players.push({
    socketId: socket.id,
    name,
    avatar,
    score: 0,
    isHost: socket.id === room.hostId,
    isConnected: true, // ‚úÖ Tr·∫°ng th√°i k·∫øt n·ªëi online
  });

  socket.join(pin);
  console.log(`üôã Player ${name} joined Room ${pin}`);
  io.to(pin).emit("room-updated", room); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
  callback({ success: true });
});


    // ========== HOST B·∫ÆT ƒê·∫¶U GAME ==========
    socket.on("start-game", ({ pin }) => {
      const room = rooms[pin];
      if (room && socket.id === room.hostId) {
        room.isStarted = true;
        room.currentQuestion = 0;
        console.log(`‚ñ∂Ô∏è Game started in Room ${pin}`);
        io.to(pin).emit("game-started", room);
      }
    });

    // ========== T·∫†M D·ª™NG GAME ==========
    socket.on("pause-game", ({ pin, isPaused }) => {
      const room = rooms[pin];
      if (!room || socket.id !== room.hostId) return;

      console.log(`‚è∏Ô∏è Game in Room ${pin} is now ${isPaused ? "paused" : "resumed"}`);
      io.to(pin).emit("game-paused", isPaused);
    });

    // ========== NG∆Ø·ªúI CH∆†I TR·∫¢ L·ªúI ==========
    socket.on("submit-answer", ({ pin, correct }) => {
      const room = rooms[pin];
      if (!room) return;

      const player = room.players.find(p => p.socketId === socket.id);
      if (player) {
        if (correct) player.score += 1;
        console.log(`üìù ${player.name} (${socket.id}) answered in Room ${pin}`);
        io.to(pin).emit("room-updated", room);
      }
    });

    // ========== CHUY·ªÇN C√ÇU H·ªéI ==========
    socket.on("next-question", ({ pin }) => {
      const room = rooms[pin];
      if (room && socket.id === room.hostId) {
        room.currentQuestion += 1;
        console.log(`‚û°Ô∏è Next question ${room.currentQuestion} in Room ${pin}`);
        io.to(pin).emit("next-question", room.currentQuestion);
      }
    });

    // ========== KICK NG∆Ø·ªúI CH∆†I ==========
    socket.on("kick-player", ({ pin, targetSocketId }, callback) => {
      const room = rooms[pin];
      if (!room || socket.id !== room.hostId) return callback?.({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn." });

      const index = room.players.findIndex(p => p.socketId === targetSocketId);
      if (index === -1) return callback?.({ error: "Ng∆∞·ªùi ch∆°i kh√¥ng t·ªìn t·∫°i." });

      const kickedPlayer = room.players[index];
      room.players.splice(index, 1);
      io.to(targetSocketId).emit("kicked");
      io.to(pin).emit("room-updated", room);
      console.log(`üëû ${kickedPlayer.name} b·ªã kick kh·ªèi Room ${pin}`);
      callback?.({ success: true });
    });

    // ========== R·ªúI PH√íNG ==========
    socket.on("leave-room", ({ pin }, callback) => {
      const room = rooms[pin];
      if (!room) return;

      const index = room.players.findIndex(p => p.socketId === socket.id);
      if (index !== -1) {
        const name = room.players[index].name;
        room.players.splice(index, 1);
        console.log(`üö™ ${name} (${socket.id}) left Room ${pin}`);
        io.to(pin).emit("room-updated", room);
      }

      if (room.players.length === 0 && socket.id === room.hostId) {
        delete rooms[pin];
        console.log(`üóëÔ∏è Room ${pin} deleted (empty and no host)`);
      }
    });

    // ========== NG·∫ÆT K·∫æT N·ªêI ==========

socket.on("disconnect", () => {
  for (const pin in rooms) {
    const room = rooms[pin];
    const player = room.players.find(p => p.socketId === socket.id);

    if (player) {
      player.isConnected = false; // ƒê√°nh d·∫•u player l√† ƒë√£ m·∫•t k·∫øt n·ªëi
      console.log(`‚ö†Ô∏è Player ${player.name} temporarily disconnected from Room ${pin}`);
      io.to(pin).emit("room-updated", room);  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
    }

    if (room.hostId === socket.id) {
      console.log(`‚è≥ Host disconnected from Room ${pin}, waiting for reconnection...`);
      // Gi·ªØ timeout cho host v√† player ƒë·ªÉ reconnect
      if (!roomDeletionTimeouts[pin]) {
        roomDeletionTimeouts[pin] = setTimeout(() => {
          if (rooms[pin]) {
            console.log(`üóëÔ∏è Room ${pin} deleted due to host not reconnecting in time.`);
            delete rooms[pin];
            delete roomDeletionTimeouts[pin];
          }
        }, 10000); // 10 gi√¢y ch·ªù reconnect
      }
    }
  }
});


    // ========== HOST RECONNECT ==========

socket.on("host-reconnect", ({ pin, oldSocketId }) => {
  const room = rooms[pin];
  if (!room) {
    console.warn(`‚ùóReconnection failed: Room ${pin} not found`);
    return;
  }

  if (room.hostId === oldSocketId) {
    room.hostId = socket.id;  // C·∫≠p nh·∫≠t hostId m·ªõi
    socket.join(pin);
    console.log(`üîÑ Host reconnected to Room ${pin} with new socket: ${socket.id}`);

    if (roomDeletionTimeouts[pin]) {
      clearTimeout(roomDeletionTimeouts[pin]);
      delete roomDeletionTimeouts[pin];
      console.log(`‚úÖ Room ${pin} preserved ‚Äî host reconnected in time`);
    }

    io.to(pin).emit("room-updated", room);  // C·∫≠p nh·∫≠t t·∫•t c·∫£ ng∆∞·ªùi ch∆°i v·ªÅ th√¥ng tin ph√≤ng m·ªõi
  } else {
    console.warn(`‚ö†Ô∏è Mismatched host socket for Room ${pin}`);
  }
});

    // ========== PLAYER RECONNECT ==========

socket.on("player-reconnect", ({ pin, oldSocketId, name, avatar }) => {
  const room = rooms[pin];
  if (!room) {
    console.warn(`‚ùóReconnection failed: Room ${pin} not found`);
    return;
  }

  const player = room.players.find(p => p.socketId === oldSocketId);
  if (player) {
    player.socketId = socket.id;  // C·∫≠p nh·∫≠t socketId m·ªõi cho ng∆∞·ªùi ch∆°i
    player.isConnected = true;     // ƒê√°nh d·∫•u ng∆∞·ªùi ch∆°i l√† ƒë√£ k·∫øt n·ªëi l·∫°i
    socket.join(pin);
    console.log(`üîÑ Player ${name} reconnected to Room ${pin} with socket: ${socket.id}`);
    io.to(pin).emit("room-updated", room);  // C·∫≠p nh·∫≠t t·∫•t c·∫£ ng∆∞·ªùi ch∆°i v·ªÅ tr·∫°ng th√°i ph√≤ng
  } else {
    console.warn(`‚ö†Ô∏è Player ${name} not found in Room ${pin}. Reconnection ignored.`);
  }
});

  });
};
